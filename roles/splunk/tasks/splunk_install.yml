---
#
# roles/splunk/tasks/splunk_install.yml
#


- name: update apt cache and install required packages
  ansible.builtin.apt: 
    name: '{{ splunk_apt_packages }}'
    state: present
    update_cache: yes
  become: true

- name: check if splunk is installed
  stat: 
    path: '{{ splunk_dir }}/etc/licenses'
  register: splunk_path
  become: true

- name: download and install splunk package
  apt:
    deb: '{{ splunk_url }}'
    install_recommends: yes
  become: true
  when: splunk_path.stat.exists == false

- name: create splunk group
  ansible.builtin.group:
    name: '{{ splunk_group }}'
    state: present
  become: true

- name: create splunk user
  user:
    name: '{{ splunk_user }}'
    group: '{{ splunk_group }}'
  become: true
    
- name: modify splunk directory permissions
  file:
    path: '{{ splunk_dir }}'
    owner: '{{ splunk_user }}'
    group: '{{ splunk_group }}'
    recurse: yes
  become: true

- name: initial splunk start
  command: '{{ splunk_dir }}/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd {{ splunk_admin_password }}'
  args:
    creates: '{{ splunk_dir }}/etc/licenses'
  become: true
  become_user: '{{ splunk_user }}'
  
- name: start splunk at boot
  command: '{{ splunk_dir }}/bin/splunk enable boot-start -user {{ splunk_user }}' 
  become: true
  when: splunk_path.stat.exists == false

- name: transfer license file
  copy:
    src: '{{ splunk_license_filename }}' 
    dest: '{{ splunk_dir }}/{{ splunk_license_filename }}'
    owner: '{{ splunk_user }}'
    group: '{{ splunk_group }}'
  become: true
  when: splunk_license_filename is defined
  register: license_status

- name: register license 
  shell: '{{ splunk_dir }}/bin/splunk add licenses {{ splunk_dir }}/{{ splunk_license_filename }} -auth admin:{{ splunk_admin_password }}'
  become: true
  become_user: '{{ splunk_user }}'
  when: license_status is changed
  notify: restart splunk

- name: enable universal forwarder listener on tcp 9997
  shell: '{{ splunk_dir }}/bin/splunk enable listen 9997 -auth admin:{{ splunk_admin_password }}'
  no_log: true
  become: true
  become_user: '{{ splunk_user }}'
  when: splunk_path.stat.exists == false
  
# - name: clone apps from github
#   git:
#     repo: '{{ item.r }}'
#     dest: '{{ splunk_dir }}/etc/apps/{{ item.n }}'
#   become: true
#   become_user: '{{ splunk_user }}'
#   notify: restart splunk
#   with_items:
#     - '{{ splunk_app_repos }}'